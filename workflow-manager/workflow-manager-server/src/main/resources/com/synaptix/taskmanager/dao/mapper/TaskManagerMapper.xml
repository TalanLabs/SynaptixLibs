<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.synaptix.taskmanager.dao.mapper.TaskManagerMapper">

	<update id="archiveTaskCluster">
		call p_task_manager.archive_task_cluster(#{idCluster,javaType=IId})
	</update>
	
	<select id="findBackupByIdCluster" resultMap="com.synaptix.taskmanager.model.ITaskBackup">
		select * from t_task_backup
		where id_cluster = #{idCluster,javaType=IId}
		and rownum = 1
	</select>
	
	<select id="findBackupByIdObjectAndClass" resultMap="com.synaptix.taskmanager.model.ITaskBackup">
		select * from t_task_backup
		where id_object = #{idObject,javaType=IId}
		and object_type = #{objectType,javaType=java.lang.Class}
		and rownum = 1
	</select>
	
	<update id="flagTasksBackupToLaunch">
		update t_task_backup 
			set id_process = #{idProcess,javaType=IId},
			updated_date = #{date,javaType=java.util.Date},
			version = version + 1
		where id in (
		    select id from (
		      select * from (
		        select * from (
		          select t.*, ROW_NUMBER() OVER (PARTITION BY id_cluster ORDER BY priority, nvl(updated_date, created_date)) AS rnk
		          from t_task_backup t
		          where t.nb_retry <![CDATA[<]]> #{maxRetry}
		          and t.id_cluster is not null
		          and id_process is null
		          and t.created_date <![CDATA[<]]> #{date,javaType=java.util.Date} - #{createdDateDelay} / 24 / 60
		          and (t.updated_date <![CDATA[<]]> #{date,javaType=java.util.Date} - #{updatedDateDelay} / 24 / 60 or t.updated_date is null)
		        ) where rnk = 1
		        UNION ALL
		        select t.*, 1 as rnk
		        from t_task_backup t
		        where t.nb_retry <![CDATA[<]]> #{maxRetry}
		        and t.id_cluster is null
		        and id_process is null
		        and t.created_date <![CDATA[<]]> #{date,javaType=java.util.Date} - #{createdDateDelay} / 24 / 60
		        and (t.updated_date <![CDATA[<]]> #{date,javaType=java.util.Date} - #{updatedDateDelay} / 24 / 60 or t.updated_date is null)    
		      )
		      order by priority, nvl(updated_date, created_date)
		    ) 
		    where rownum <![CDATA[<=]]> #{nbLines}
		    )
	</update>
	
	<select id="findTasksBackupToLaunch" resultMap="com.synaptix.taskmanager.model.ITaskBackup">
		select * from t_task_backup
		where id_process = #{idProcess,javaType=IId}
	</select>

	<update id="deleteTaskCluster">
		call p_task_manager.delete_task_cluster_arch(#{idCluster,javaType=IId})
	</update>
</mapper>
